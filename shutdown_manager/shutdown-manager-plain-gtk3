#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
**************************************************************
* Description: A Gtk GUI with buttons bound to commands.     *
*              It can be used as a logoff/shutdown interface *
*              for windows managers that lack one.           *
*                                                            *
* Licence    : Public Domain.                                *
*                                                            *
* Author     : Antonios Tsolis (2016)                        *
**************************************************************
'''
import os
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from collections import OrderedDict


# We define a get_resource_path function to help us find
# the path of our icons in the system:
def get_resource_path(rel_path):
    dir_of_py_file = os.path.dirname(__file__)
    rel_path_to_resource = os.path.join(dir_of_py_file, rel_path)
    abs_path_to_resource = os.path.abspath(rel_path_to_resource)
    return abs_path_to_resource


class SystemDialog (Gtk.Window):
    def __init__(self):
        super(SystemDialog, self).__init__()

        # We define a dictionary with button label-command key-value
        # pairs. The reason we use an OrderedDict is that in python
        # the simple dict does not keep the order of the keys and we
        # do not want our buttons to appear in arbitrary order.
        # Keep in mind that you have to edit the commands according
        # to your system and your needs.
        self.actions = OrderedDict([
                       ("Cancel", None),
                       ("Lock", "slock &"),
                       ("Restart WM", "sudo killall dwm &"),
                       ("Sleep", "sudo pm-suspend &"),
                       ("Hibernate", "sudo pm-hibernate &"),
                       ("Sleep + Hibernate", "sudo pm-suspend-hybrid &"),
                       ("Logout", "sudo killall X &"),
                       ("Reboot", "sudo reboot &"),
                       ("Shutdown", "sudo poweroff &")])
                       
        self.buttons = {}

        # We make our window undecorated, centered on screen
        # and we keep it on top.
        self.set_border_width(0)
        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_keep_above(True)

        # We define one vertical box and three horizontal boxes.
        # The vertical box will contain and align vertical the 3
        # horizontal boxes while each horizontal box while keep and align
        # horizontally 3 of our buttons. Therefore, in the end, we will
        # have a nice 3x3 buttons square,
        self.vbox = Gtk.VBox(homogeneous=True, spacing=5)
        self.hboxes = [Gtk.HBox(homogeneous=True, spacing=5), Gtk.HBox(homogeneous=True, spacing=5), Gtk.HBox(homogeneous=True, spacing=5)]

        # We create our buttons, put some icons and labels on them,
        # ‘connect’ their click event with a callback handler and pack
        # them inside the empty horizontal boxes (3 buttons in each
        # horizontal box).
        c = 0
        boxIndex = 0
        for label in self.actions.keys():
            self.buttons[label] = Gtk.Button(label=label)
            ico = Gtk.Image()
            ico.set_from_file(get_resource_path("images/"+label+".png"))
            self.buttons[label].set_image(ico)
            self.buttons[label].set_image_position(Gtk.PositionType.TOP)
            self.hboxes[boxIndex].pack_start(self.buttons[label], True, True, 0)
            self.buttons[label].connect('clicked', self.callback, label)
            c += 1
            if not (c % 3):
                boxIndex += 1

        # We pack the horizontal boxes inside the vertical box and
        # the vertical box inside our window. Do not forget to show
        # all our widgets with self.show_all().
        for hbox in self.hboxes:
            self.vbox.pack_start(hbox, True, True, 0)
        self.add(self.vbox)
        self.show_all()

        # If our window is deleted/destroyed call self.callback (to exit)
        self.connect("delete-event", self.callback)
        # If a key is pressed call self.key_press_event
        self.connect("key-press-event", self.key_press_event)

    # This is the our keyboard callback/event handler function.
    # If the user has pressed Escape, we quit.
    def key_press_event(self, widget=None, event=None):
        keyval = event.keyval
        keyval_name = Gtk.gdk.keyval_name(keyval)
        # state = event.state
        # ctrl = (state & Gtk.gdk.CONTROL_MASK)
        if keyval_name == "Escape":
            Gtk.main_quit()
        return False

    # This is the our generic callback function
    def callback(self, widget=None, data=None):
        if (data is not None and
           data in self.actions and
           self.actions[data] is not None):
                os.system(self.actions[data])
        Gtk.main_quit()


if __name__ == "__main__":
    SystemDialog()
    Gtk.main()
